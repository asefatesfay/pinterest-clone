name: Deploy Go Backend to AWS Lambda with API Gateway

on:
  push:
    paths:
      - 'backend/**' # Trigger only when changes are made to the backend folder

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.1

      - name: Install dependencies
        run: |
          cd backend
          go mod tidy # Ensures all required dependencies are downloaded

      - name: Build Go binary
        run: |
          cd backend
          GOOS=linux GOARCH=amd64 go build -o main main.go

      - name: Zip binary
        run: |
          cd backend
          zip main.zip main

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

    #   - name: Create Lambda function (if not exists)
    #     run: |
    #       aws lambda get-function --function-name go-backend || \
    #       aws lambda create-function \
    #         --function-name go-backend \
    #         --runtime go1.x \
    #         --role arn:aws:iam::123456789012:role/your-lambda-execution-role \
    #         --handler main \
    #         --zip-file fileb://backend/main.zip

      - name: Update Lambda function
        run: |
          aws lambda update-function-code \
            --function-name go-backend \
            --zip-file fileb://backend/main.zip

            - name: Configure API Gateway
            run: |
              # Check if the API Gateway exists
              API_ID=$(aws apigateway get-rest-apis --query "items[?name=='go-backend-api'].id" --output text) || true
              
              # Create API Gateway if it doesn't exist
              if [ -z "$API_ID" ]; then
                API_ID=$(aws apigateway create-rest-api --name "go-backend-api" --query "id" --output text)
              fi
          
              # Get the root resource ID
              ROOT_ID=$(aws apigateway get-resources --rest-api-id $API_ID --query "items[?path=='/'].id" --output text)
          
              # Create a resource for the Lambda function
              RESOURCE_ID=$(aws apigateway create-resource --rest-api-id $API_ID --parent-id $ROOT_ID --path-part "api" --query "id" --output text)
          
              # Create a GET method for the resource
              aws apigateway put-method --rest-api-id $API_ID --resource-id $RESOURCE_ID --http-method GET --authorization-type "NONE"
          
              # Integrate the GET method with the Lambda function
              aws apigateway put-integration --rest-api-id $API_ID --resource-id $RESOURCE_ID --http-method GET \
                --type AWS_PROXY --integration-http-method POST \
                --uri arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:123456789012:function:go-backend/invocations
          
              # Deploy the API Gateway
              aws apigateway create-deployment --rest-api-id $API_ID --stage-name prod
          
              echo "API Gateway deployed at: https://$API_ID.execute-api.us-west-2.amazonaws.com/prod/api"