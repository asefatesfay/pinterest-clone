name: Deploy Node.js Backend to AWS Lambda with API Gateway

on:
  push:
    paths:
      - 'backend/**'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          cd backend
          npm install

      - name: Zip application
        run: |
          cd backend
          zip -r app.zip .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update Lambda function
        run: |
          aws lambda update-function-code \
            --function-name node-backend \
            --zip-file fileb://backend/app.zip

      - name: Configure API Gateway
        run: |
          # Check if the API Gateway exists
          API_ID=$(aws apigateway get-rest-apis --query "items[?name=='node-backend-api'].id" --output text) || true
          
          # Skip creation if API Gateway exists
          if [ -z "$API_ID" ]; then
            echo "API Gateway does not exist. Creating a new one..."
            API_ID=$(aws apigateway create-rest-api --name "node-backend-api" --query "id" --output text)
          else
            echo "API Gateway already exists with ID: $API_ID"
          fi

          # Get the root resource ID
          ROOT_ID=$(aws apigateway get-resources --rest-api-id $API_ID --query "items[?path=='/'].id" --output text)

          # Check if the /api resource already exists
          RESOURCE_ID=$(aws apigateway get-resources --rest-api-id $API_ID --query "items[?path=='/api'].id" --output text)
          if [ -z "$RESOURCE_ID" ]; then
            echo "/api resource does not exist. Creating a new one..."
            RESOURCE_ID=$(aws apigateway create-resource --rest-api-id $API_ID --parent-id $ROOT_ID --path-part "api" --query "id" --output text)
          else
            echo "/api resource already exists with ID: $RESOURCE_ID"
          fi

          # Fetch the correct Lambda ARN
          LAMBDA_ARN=$(aws lambda get-function --function-name node-backend --query "Configuration.FunctionArn" --output text)

          # Add permission for API Gateway to invoke the Lambda function
          echo "Adding permission for API Gateway to invoke the Lambda function..."
          aws lambda add-permission \
            --function-name node-backend \
            --statement-id apigateway-access \
            --action lambda:InvokeFunction \
            --principal apigateway.amazonaws.com \
            --source-arn arn:aws:execute-api:us-west-2:195275664182:$API_ID/*/GET/api || true

          # Create or update a GET method for the resource
          METHOD_EXISTS=$(aws apigateway get-method --rest-api-id $API_ID --resource-id $RESOURCE_ID --http-method GET --query "httpMethod" --output text || true)
          if [ -z "$METHOD_EXISTS" ]; then
            echo "Creating GET method for /api resource..."
            aws apigateway put-method --rest-api-id $API_ID --resource-id $RESOURCE_ID --http-method GET --authorization-type "NONE"
          else
            echo "GET method already exists for /api resource."
          fi

          # Integrate the GET method with the Lambda function
          echo "Integrating GET method with Lambda function..."
          aws apigateway put-integration --rest-api-id $API_ID --resource-id $RESOURCE_ID --http-method GET \
            --type AWS_PROXY --integration-http-method POST \
            --uri arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/$LAMBDA_ARN/invocations

          # Verify the integration
          INTEGRATION_URI=$(aws apigateway get-integration --rest-api-id $API_ID --resource-id $RESOURCE_ID --http-method GET --query "uri" --output text)
          if [[ "$INTEGRATION_URI" != *"$LAMBDA_ARN"* ]]; then
            echo "Error: Integration URI does not match the Lambda function ARN."
            exit 1
          fi

          # Deploy the API Gateway
          echo "Deploying API Gateway..."
          aws apigateway create-deployment --rest-api-id $API_ID --stage-name prod

          echo "API Gateway deployed at: https://$API_ID.execute-api.us-west-2.amazonaws.com/prod/api"